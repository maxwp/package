Subject: Правила и особенности PHP-кодирования

Дата создания: 2010-08-24.
Автор: Maxim Miroshnichenko <max@webproduction.com.ua>
Статус документа: принят, происходит внедрение

==============================
Полные пути
==============================
Запрещено писать include/include_once/require/require_once без передачи
полного пути к подключаемому файлу. Везде должен быть полный путь. Это
касается не только include-ов, но и всех других файлов, с которыми имеет
дело проект (/media/, например).

==============================
printы
==============================
Запрещено оставлять не закомменченные print/print_r/echo/var_dump.
Единственное исключение - использование режима development или debug.

==============================
Закрывающий тег
==============================
Запрещено использовать закрывающий php-тег ?> при разработке чего-либо.
Наличие закрывающего тега чуть-чуть замедляет скорость работы интерпретатора php.

==============================
Именование глобальных переменных
==============================
Глобальные переменные запрещены.
В ООП вместо глобальных переменных есть паттерн Registry.

==============================
Именование функций
==============================
Функции запрещены.
В ООП только методы.
Если вам все-таки нужна функция - значит вы пока еще не знаете как решить
эту задачу в ООП.

==============================
Именование классов и интерфейсов
==============================
* Файл с классом или интерфейсов должен называться ИмяКласса.class.php
(заканчиваться на .class.php).
* В одном файле - только один класс.
* Имя класса в большей степени должно находиться в нижнем регистре
** Неправильно: MYCLASS
** Правильно: MyClass
* Имя класса/интерфейса начинается с большой буквы (MyClass)
* Имя класса/интерфейса не может содержать знака подчеркивания
(неправильно: My_class)
* Возможно использование цифр
* Если класс начинается с больших букв “A” или “I”, то следующая буква
должна быть обязательно в нижнем регистре.
* Абстрактные классы должны начинаться на букву A, а вторая буква должна быть
большой. Например: AFile.
* Интерфейс должны начинаться только на букву I, а вторая буква должна быть
большой. Например: IUser.
* По вышеприведенным правилам следует, что нельзя назвать класс Abc и при
этом он не будет абстрактным.
* Классы, которые находятся внутри пакетов (а это все), должны называться
на имя пакета. Например, класс Engine_HTMLHead - и находится он в
Engine/Engine_HTMLHead.class.php

==============================
Структура и порядок в пределах класса
==============================
Основная идея - главная логика класса - всегда сверху,
а приватные свойства и getters/setters - снизу.

В большинстве случаев порядок в класса следующий:

1. конструктор, если он содержит часть логики;
2. методы с основной логикой;
3. внутренние методы доступа к данным (приватные getters/setters);
4. публичные getters/setters;
5. приватные свойства.

==============================
Именование и структура пакетов
==============================
* Если пакет называется MyPackage, то в нем обязательно должен присутствовать
класс MyPackage.class.php, а в корне файла пакета должен быть файл include.php
* В include.php должно быть описано два случая: подключения пакета с
использованием PackageLoader'a и без (чистый include_once).
* В случае, если пакет имеет загрузчик (MyPackage_Loader.class.php), то
в include.php должен подключаться только один класс - класс загрузчика.
* Практически все пакеты обязаны иметь точку старта.

==============================
Именование методов
==============================
* Все не-static методы должны начинаться с маленькой буквы.
public function foo() {...
* Все static методы должны начинаться с большой буквы.
public static function Foo() {..
* Все приватные методы должны начинаться на знак подчеркивания.
Например: private function _foo() {...
* Все приватные static методы начинаются на знак подчеркивания,
а второй символ - большая буква. private static function _Foo() {...

==============================
Именование свойств в классе
==============================
* Все не-static свойства должны начинаться с маленькой буквы. public $var;
* Все static свойства должны начинаться с большой буквы. public static $Var;
* Все приватные свойства должны начинаться на знак подчеркивания.
Например: private $_var;
* Все приватные static свойства начинаются на знак подчеркивания, а второй
символ - большая буква. private static $_Var;
* Публичных свойств настоятельно следует избегать, заменяя их на приватные с getter + setter-методами.

==============================
Именование констант
==============================
C 2011 года в WebProduction Packages (#wpp) константы запрещены.

* Все константы пишутся в верхнем регистре (большими буквами).
Например: GURL_ACCOUNT_MYDATA
* Для логического разделения можно использовать знак подчеркивания:
** Неправильно: TIMECALCULATOR
** Правильно: TIME_CALCULATOR

==============================
Именование переменных
==============================
На именование переменных в данный момент явно не накладывается никаких
ограничений. Но рекомендуем использовать такие нотации:

** Объект: $xxxObject. Это обеспечит лучшее понимание того, что находиться в переменной.
** Массив: $xxxArray или просто $a (наиболее часто встречается)
